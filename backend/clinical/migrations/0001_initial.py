# Generated by Django 5.1.1 on 2025-10-07 15:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Professional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(max_length=180, verbose_name='nome completo')),
                ('crp', models.CharField(max_length=20, verbose_name='CRP/registro profissional')),
                ('profession', models.CharField(choices=[('psychologist', 'Psicóloga'), ('psychopedagogist', 'Psicopedagoga')], max_length=32, verbose_name='área de atuação')),
                ('institution', models.CharField(blank=True, max_length=180, verbose_name='instituição')),
                ('accepts_notifications', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(max_length=180)),
                ('entity', models.CharField(max_length=120)),
                ('entity_id', models.CharField(max_length=64)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('professional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(max_length=180)),
                ('birth_date', models.DateField()),
                ('sex', models.CharField(choices=[('F', 'Feminino'), ('M', 'Masculino'), ('O', 'Outro')], max_length=1)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('emergency_contact', models.CharField(blank=True, max_length=180)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('school_history', models.TextField(blank=True)),
                ('behavior_history', models.TextField(blank=True)),
                ('family_history', models.TextField(blank=True)),
                ('initial_diagnosis', models.TextField(blank=True)),
                ('comorbidities', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FamilySession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session_date', models.DateField()),
                ('topic', models.CharField(max_length=180)),
                ('activities', models.TextField()),
                ('action_items', models.TextField(blank=True)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True)),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='family_sessions', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='family_sessions', to='clinical.patient')),
            ],
            options={
                'ordering': ['-session_date'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_type', models.CharField(choices=[('technical', 'Técnico'), ('semiannual_review', 'Reavaliação Semestral'), ('weekly', 'Acompanhamento Semanal'), ('monthly', 'Acompanhamento Mensal')], max_length=32)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('summary', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('exported_pdf_path', models.CharField(blank=True, max_length=255)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='clinical.patient')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='SatisfactionSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responses', models.JSONField(default=dict)),
                ('engagement_index', models.PositiveIntegerField(help_text='Percentual de adesão familiar', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('conducted_at', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surveys', to='clinical.patient')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surveys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-conducted_at'],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session_type', models.CharField(choices=[('psychological', 'Psicológica'), ('psychopedagogical', 'Psicopedagógica'), ('assessment', 'Avaliação'), ('reevaluation', 'Reavaliação')], max_length=24)),
                ('session_date', models.DateField()),
                ('duration_minutes', models.PositiveIntegerField(default=50)),
                ('activities', models.TextField()),
                ('behaviour_observations', models.TextField(blank=True)),
                ('progress_notes', models.TextField(blank=True)),
                ('progress_scales', models.JSONField(blank=True, default=dict)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='clinical.patient')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-session_date'],
            },
        ),
        migrations.CreateModel(
            name='TherapeuticPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('general_objectives', models.TextField()),
                ('specific_objectives', models.TextField()),
                ('strategies', models.TextField()),
                ('start_date', models.DateField()),
                ('next_review_date', models.DateField()),
                ('monitoring_indicators', models.JSONField(blank=True, default=dict)),
                ('pdf_storage_path', models.CharField(blank=True, max_length=255)),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='therapeutic_plan', to='clinical.patient')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='therapeutic_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scale', models.CharField(choices=[('MCHAT', 'M-CHAT'), ('ABC', 'Autism Behavior Checklist'), ('VINELAND', 'Vineland'), ('ATEC', 'ATEC'), ('CGAS', 'C-GAS/AGF')], max_length=20)),
                ('application_date', models.DateField()),
                ('score_total', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('responses', models.JSONField(blank=True, default=dict)),
                ('interpretation', models.TextField(blank=True)),
                ('comparison_notes', models.TextField(blank=True)),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='clinical.patient')),
            ],
            options={
                'ordering': ['-application_date'],
                'unique_together': {('patient', 'scale', 'application_date')},
            },
        ),
    ]
